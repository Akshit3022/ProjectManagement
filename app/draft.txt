# from django.db import models
# from django.contrib.auth.models import BaseUserManager, AbstractBaseUser

# class MyUserManager(BaseUserManager):
#     def create_user(self, userEmail, userName, userPassword1=None, userPassword2=None):
#         """
#         Creates and saves a User with the given email, date of
#         birth and password.
#         """
#         if not userEmail:
#             raise ValueError("Users must have an email address")

#         user = self.model(
#             userEmail=self.normalize_email(userEmail),
#             userName=userName,
#         )

#         user.set_password(userPassword1)    
#         user.save(using=self._db)
#         return user

#     def create_superuser(self, email, name, password=None):
#         """
#         Creates and saves a superuser with the given email, date of
#         birth and password.
#         """
#         user = self.create_user(
#             email,
#             password=password,
#             name=name,
#         )
#         user.is_admin = True
#         user.save(using=self._db)
#         return user
    

# class CustomUser(AbstractBaseUser):

#     userEmail = models.EmailField(
#         verbose_name="email address",
#         max_length=255,
#         unique=True,
#     )
#     userName = models.CharField(max_length=50)
#     userPassword = models.CharField(max_length=50)
#     userType = models.CharField(max_length=100, choices=(('Admin', 'Admin'),('PM', 'Project-Manager'),('TL', 'Team-Leader'),('Emp', 'Employee')))
#     is_active = models.BooleanField(default=True, null=True, blank=True)
#     is_admin = models.BooleanField(default=False)

#     # objects = MyUserManager()

#     USERNAME_FIELD = "userEmail"
#     REQUIRED_FIELDS = ["userName", "password"]

#     def __str__(self):
#         return f"{self.userType}{' - Active' if self.userType == 'Employee' and self.is_active else ''}"

#     def __str__(self):
#         return self.userEmail

#     def has_perm(self, perm, obj=None):
#         "Does the user have a specific permission?"
#         # Simplest possible answer: Yes, always
#         return True

#     def has_module_perms(self, app_label):
#         "Does the user have permissions to view the app `app_label`?"
#         # Simplest possible answer: Yes, always
#         return True

#     @property
#     def is_staff(self):
#         "Is the user a member of staff?"
#         # Simplest possible answer: All admins are staff
#         return self.is_admin




from rest_framework import status
from rest_framework.response import Response
from rest_framework import viewsets
from rest_framework_simplejwt.tokens import RefreshToken
from django.contrib.auth.hashers import make_password, check_password

from app.models import CustomUser
from app.serializers import CustomUserSerializer

class RegisterView(viewsets.ViewSet):
    def create(self, request):
        serializer = CustomUserSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({'message': 'User created successfully'}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

class LoginView(viewsets.ViewSet):
    def create(self, request):
        userEmail = request.data.get('userEmail')
        userPassword = request.data.get('userPassword')

        try:
            user = CustomUser.objects.get(userEmail=userEmail)
        except CustomUser.DoesNotExist:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)

        if check_password(userPassword, user.userPassword):
            refresh = RefreshToken.for_user(user)
            return Response({
                'refresh': str(refresh),
                'access': str(refresh.access_token)
            })
        else:
            return Response({'error': 'Invalid credentials'}, status=status.HTTP_401_UNAUTHORIZED)


from rest_framework import status
from rest_framework.response import Response
from rest_framework import viewsets

from app.models import CustomUser
from app.serializers import CustomUserSerializer

class CustomUserView(viewsets.ViewSet):
    serializer_class = CustomUserSerializer

    def list(self, request):
        queryset = CustomUser.objects.all()
        serialized_data = self.serializer_class(queryset, many=True).data
        # Extracting required fields from serialized data
        user_data = [{'userName': user['userName'], 'userType': user['userType'], 'is_active': user['is_active']} for user in serialized_data]
        return Response(user_data)
